#!/bin/bash

################################################################################
# GoboALFS script to automate the bootstrap of GoboLinux based on the ALFS book.
# No assumptions are made regarding the Linux distribution running on the host.
#
# Lucas C. Villa Real <lucasvr@gobolinux.org>
################################################################################

if [ $# != 1 ]
then
    echo "Usage: $0 <workdir>"
    echo
    echo "<workdir> must be an initially empty directory. It will be populated with the"
    echo "JHALFS tree, compiled packages and with the ISO development files."
    echo
    exit 1
fi

WORKDIR=$(readlink -f "$1")
SVNDIR=$(readlink -f $(dirname "$0"))
PATCHES=(
    $SVNDIR/01-gobolinux-jhalfs.patch
    $SVNDIR/02-gobolinux-book.patch
)
GOBO_JHALFS_DIR="$SVNDIR/jhalfs"
ALFS_CONFIGURATION="$SVNDIR/jhalfs/configuration"
PACKAGEDIR=$WORKDIR/Packages
BUILDDIR=$WORKDIR/RootFS

# LocalFunctions must be imported after all global definitions have been set
source $SVNDIR/LocalFunctions

###################################################################################################
### Sanity checks
###################################################################################################

if ! grep -q "^lfs:" /etc/passwd || ! grep -q "^lfs:" /etc/group
then
    echo "Please create the 'lfs' user and group before proceeding."
    echo "Also, certify that 'lfs' has suid rights."
    exit 1
fi

if [ $UID = 0 ]
then
    echo "This script should not be run as root. Please invoke it with a regular"
    echo "user account with sudo privileges."
    exit 1
fi

sudo whoami >& /dev/null
if [ $? != 0 ]
then
    echo "Please make sure that your user has sudo privileges before continuing."
    exit 1
fi

###################################################################################################
### Operation -- LFS part of the script
###################################################################################################

[ ! -d "$BUILDDIR" ] && mkdir -p "$BUILDDIR"
[ ! -d "$PACKAGEDIR" ] && mkdir -p "$PACKAGEDIR"

if [ $(ls "$BUILDDIR"/ | wc -l | awk {'print $1'}) -gt 0 ]
then
    echo "Using existing build directory $BUILDDIR"
fi

if [ ! -d "$WORKDIR/jhalfs-trunk" ]
then
    echo "Downloading JHALFS from Subversion"
	svn co svn://svn.linuxfromscratch.org/ALFS/jhalfs/trunk "$WORKDIR/jhalfs-trunk"

    mkdir -p "$WORKDIR/jhalfs-trunk/custom"
    pushd "$WORKDIR/jhalfs-trunk" > /dev/null

    echo "Obtaining patches"
    for patchFile in ${PATCHES[@]}; do cp "$patchFile" custom/$(basename "$patchFile"); done

    echo "Patching"
    jhalfsPatch=$(ls custom/*gobolinux-jhalfs.patch)
    if [ ! -e ".gobolinux-patched" ]
    then
        patch -i "$jhalfsPatch" -p0
        touch .gobolinux-patched
    fi

    if [ ! -e BLFS/libs/gobolinux_patch_buildscript ]
    then
        cp -R "$GOBO_JHALFS_DIR"/* .
    fi

    popd > /dev/null
fi

if [ ! -d "$BUILDDIR/Programs/BootScripts-ALFS" ]
then
    pushd "$WORKDIR/jhalfs-trunk" > /dev/null
    echo "Running menuconfig."
    make menuconfig

    echo "Processing JHALFS configuration file"
    perl -pi -e "s,^BUILDDIR=.*,BUILDDIR=\"$BUILDDIR\",g" configuration
    [ -d "/Users" ] && perl -pi -e 's,LHOME=.*,LHOME=\"/Users\",g' configuration

    ./jhalfs run || exit 1
    popd > /dev/null
fi

if [ ! -e "$BUILDDIR/tools/bin/packInstall.sh" ]
then
    sudo cp "$WORKDIR/jhalfs-trunk/pkgmngt/packInstall.sh" "$BUILDDIR/tools/bin/packInstall-gobolinux.sh"
    sudo chmod +x "$BUILDDIR/tools/bin/packInstall-gobolinux.sh"
fi

# Move left-over files to the packages where they belong

MoveSettingsFile nsswitch.conf Glibc
MoveSettingsFile udev/hwdb.bin Udev
MoveSettingsFile inittab BootScripts-ALFS
MoveSettingsFile syslog.conf Sysklogd

MoveFile lib/libstdc++.la GCC
MoveFile lib/locale Glibc
MoveFile share/zoneinfo Glibc

# Fix broken installation of LibXML2

libxml2Version=$(ls "$BUILDDIR/Programs/LibXML2/" | grep -v "Settings\|Current")
duplicatedDir="$BUILDDIR/Programs/LibXML2/$libxml2Version/Programs"
if [ -d "$duplicatedDir" ]
then
    libdir=$(find "$duplicatedDir" -name lib -type d)
    for i in "$libdir/"*; do sudo mv "$i" "$BUILDDIR/Programs/LibXML2/$libxml2Version/lib/"; done
    sudo rm -rf "$duplicatedDir"
    InChroot /tools/bin/SymlinkProgram -c overwrite LibXML2 $libxml2Version
fi

# Update /etc/passwd, /etc/group, /etc/resolv.conf, /etc/sudoers, and udev settings

if ! grep -q "^fibo:" "$BUILDDIR/System/Settings/passwd"
then
    echo "fibo:x:21:21::/tmp:/bin/bash" | sudo tee -a "$BUILDDIR/System/Settings/passwd" > /dev/null
    echo "fibo:x:21:" | sudo tee -a "$BUILDDIR/System/Settings/group" > /dev/null
fi
if ! grep -q "^`whoami`:" "$BUILDDIR/System/Settings/passwd"
then
    grep "^`whoami`:" /etc/passwd | sudo tee -a "$BUILDDIR/System/Settings/passwd" > /dev/null
fi
if grep -q "EDITME" "$BUILDDIR/System/Settings/resolv.conf"
then
    sudo rm -f "$BUILDDIR/System/Settings/resolv.conf"
    echo nameserver 208.67.222.222 | sudo tee -a "$BUILDDIR/System/Settings/resolv.conf" > /dev/null
    echo nameserver 208.67.220.220 | sudo tee -a "$BUILDDIR/System/Settings/resolv.conf" > /dev/null
fi
if sudo grep -q "^root" "$BUILDDIR/Programs/Sudo/Current/Resources/Defaults/Settings/sudoers"
then
    sudo perl -pi -e "s/^root/gobo/g" "$BUILDDIR/Programs/Sudo/Current/Resources/Defaults/Settings/sudoers"
fi
udevVersion=$(ls "$BUILDDIR/Programs/Udev/" | grep -v "Settings\|Current")
for rulefile in "$BUILDDIR/Programs/Udev/$udevVersion/Resources/Defaults/Settings/udev/rules.d"/*
do
    grep -q "pci-db" "$rulefile" && sudo perl -pi -e "s,pci-db,hwdb --subsystem=pci,g" "$rulefile"
    grep -q "usb-db" "$rulefile" && sudo perl -pi -e "s,usb-db,hwdb --subsystem=usb,g" "$rulefile"
done

# Make sure we have /bin/sh

if [ ! -e "$BUILDDIR/bin/sh" ]
then
    bashVersion=$(ls $BUILDDIR/Programs/Bash | grep -v Settings)
    sudo ln -sf "bash" "$BUILDDIR/Programs/Bash/$bashVersion/bin/sh"
    sudo ln -sf "/Programs/Bash/$bashVersion/bin/sh" "$BUILDDIR/System/Links/Executables/sh"
fi

# Fix /proc and /dev

if [ ! -h "$BUILDDIR/proc" ]
then
    if ! grep -q "$BUILDDIR/proc" /proc/mounts
    then
        sudo rm -rf "$BUILDDIR/proc"
        sudo ln -s System/Kernel/Status "$BUILDDIR/proc"
    fi
fi

if [ ! -h "$BUILDDIR/dev" ]
then
    if ! grep -q "$BUILDDIR/dev" /proc/mounts
    then
        sudo rm -rf "$BUILDDIR/dev"
        sudo ln -s System/Kernel/Devices "$BUILDDIR/dev"
    fi
fi


###################################################################################################
### Operation -- GoboLinux part of the script
###################################################################################################

if [ ! -e "$BUILDDIR/Programs/Perl/Current/Resources/Description" ]
then
    # GoboLinux needs its special Perl package to support /System/Aliens
    sudo rm -rf "$BUILDDIR/Programs/Perl"
    # .cpan holds references to /tools, which we don't want to keep.
    sudo rm -rf "$BUILDDIR/root/.cpan"
fi

# Checkout GoboLinux scripts

if [ ! -d "$WORKDIR/BuildLiveCD" ]
then
    svn checkout http://svn.gobolinux.org/tools/branches/015/BuildLiveCD "$WORKDIR/BuildLiveCD"
fi
    
if [ ! -d "$WORKDIR/ISO/LocalSVN/tools" -o ! -d "$WORKDIR/ISO/Output/ROLayer" ]
then
    # Update the ISO environment
    mkdir -p "$WORKDIR/ISO"
    pushd "$WORKDIR/ISO" > /dev/null
    ln -fs ../Packages .
    livecdDataDir="$WORKDIR/BuildLiveCD/Data" "$WORKDIR/BuildLiveCD/bin/UpdateEnvironment"
    popd > /dev/null
fi

if [ ! -d "$BUILDDIR/Programs/Compile" ]
then
    # Install Scripts and Compile in the chroot
    InstallGoboPackage Scripts
    InstallGoboPackage Compile

    # Rename Coreutils' install to real_install
    coreutilsVersion=$(ls "$BUILDDIR/Programs/CoreUtils/" | grep -v "Settings\|Current")
    coreutilsDir="$BUILDDIR/Programs/CoreUtils/$coreutilsVersion"
    if [ ! -e "$coreutilsDir/bin/real_install" ]
    then
        sudo mv "$coreutilsDir/bin/install" "$coreutilsDir/bin/real_install"
        InChroot SymlinkProgram CoreUtils "$coreutilsVersion"
    fi

    # Rename LibXML2' xmlcatalog to real_xmlcatalog
    libxml2Version=$(ls "$BUILDDIR/Programs/LibXML2/" | grep -v "Settings\|Current")
    libxml2Dir="$BUILDDIR/Programs/LibXML2/$libxml2Version"
    if [ ! -e "$libxml2Dir/bin/real_xmlcatalog" ]
    then
        sudo mv "$libxml2Dir/bin/xmlcatalog" "$libxml2Dir/bin/real_xmlcatalog"
        InChroot SymlinkProgram LibXML2 "$libxml2Version"
    fi
fi

# Compile extra packages needed to run Compile and to boot the ISO nicely
unset recompileShadow
for appName in Git Perl GoboHide Linux Fuse CMake UnionFS-Fuse Help2Man Net-Tools Linux-PAM Dialog DHCPCD Acpid Hdparm ZSH ReiserFSProgs Parted SYSLINUX Atool
do
    if [ ! -d "$BUILDDIR/Programs/$appName" ]
    then
        InChroot Compile --no-sign --symlink=no "$appName"
        InChroot SymlinkProgram -c overwrite "$appName"
        if [ "$appName" = "Linux-PAM" ]
        then
            # Recompile Shadow with Linux-PAM support
            shadowVersion=$(ls "$BUILDDIR/Programs/Shadow/" | grep -v "Settings\|Current")
            InChroot Compile --no-sign Shadow $shadowVersion
        fi
    fi
done
CreatePackageList "Base"

function CompileExtras() {
    local listname="$1"
    shift
    for appName in $@; do [ ! -d "$BUILDDIR/Programs/$appName" ] && InChroot Compile --no-sign "$appName"; done
    CreatePackageList "$listname"
}

# At this point we can build all the extra packages that we want to have in the ISO
CompileExtras "Xorg" Xorg XTerm
CompileExtras "Printing" CUPS CUPS-Filters Ghostscript Gutenprint
CompileExtras "Networking" OpenSSH WPA_Supplicant
CompileExtras "Qt" Qt PyQt
CompileExtras "KDE" KDE

# Create packages using plain tar. Please notice the revision number (r0), for there are
# no GoboLinux recipes to produce them yet.
# We also update the package list based on what's been compiled so far.

pushd "$BUILDDIR/Programs" > /dev/null
for appName in *
do 
    grep -q "^${appName}$" "$WORKDIR/BuildLiveCD/Data/Packages-List-GoboLinuxTools-"* && continue
    CreateGoboPackage "$appName"
done
popd > /dev/null

if [ -d "$WORKDIR/ISO/Output/ROLayer/Programs" ]
then
    # Remove duplicated copies of GoboLinux specific packages inside ROLayer
    pushd "$WORKDIR/ISO/Output/ROLayer/Programs" > /dev/null
    for appName in AbsTK BootScripts Compile ConfigTools EnhancedSkel Installer LiveCD Manager Scripts
    do
        for appVersion in $(ls $appName/ | grep -v "Current\|Settings" | sort -n)
        do
            echo "$appVersion" | grep -q "SVN" || continue
            appVersionAlone=$(echo "$appVersion" | sed 's,[-A-Z],,g')
            today=`date +%Y%m%d`
            timeofday=`date +%H%M`
            if [ $appVersionAlone -lt $today ] || [ $timeofday -gt 2358 ]
            then
                # Remove (potentially) old snapshot, and also make sure to remove the 'Current' symlink
                sudo rm -rf -- "$appName/$appVersion"
                sudo rm -f "$appName/Current"
            fi
        done
        if [ ! -h "$appName/Current" ]
        then
            # Create Current symlink
            sudo ln -sf $(ls $appName/ | grep -v "Current\|Settings" | sort -n | tail -n1) "$appName/Current"
        fi
    done
    popd > /dev/null
fi

# Create the ROLayer environment to force GoboLinux tools to be fetched
CreateISO rolayer rolayer

# Create/update Installer's Programs_du file
pushd "$WORKDIR/ISO/Output/ROLayer/Programs" > /dev/null
installerVersion=$(ls Installer/ | grep -v "Current\|Settings" | sort -n | tail -n1)
duFile="$PWD/Installer/$installerVersion/share/Installer/Information/Programs_du.txt"
if [ ! -e "$duFile" ] || [ $(stat -c '%s' "$duFile") = 0 ]
then sudo du -s ./* | sudo tee "$duFile" > /dev/null
else UpdateProgramsDu "$duFile"
fi
popd > /dev/null

# Create the ISO
CreateISO squashfs iso
