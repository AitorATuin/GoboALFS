#!/bin/bash

################################################################################
# GoboALFS script to automate the bootstrap of GoboLinux based on the ALFS book.
# No assumptions are made regarding the Linux distribution running on the host.
#
# Lucas C. Villa Real <lucasvr@gobolinux.org>
################################################################################


if [ $# != 1 ]
then
    echo "Usage: $0 <workdir>"
    echo
    echo "<workdir> must be an initially empty directory. It will be populated with the"
    echo "JHALFS tree, compiled packages and with the ISO development files."
    echo
    exit 1
fi

WORKDIR=$(readlink -f "$1")
SVNDIR=$(readlink -f $(dirname "$0"))
PATCHES=(
    $SVNDIR/01-gobolinux-jhalfs.patch
    $SVNDIR/02-gobolinux-book.patch
)
GOBO_JHALFS_DIR="$SVNDIR/jhalfs"
ALFS_CONFIGURATION="$SVNDIR/jhalfs/configuration"
PACKAGEDIR=$WORKDIR/Packages
BUILDDIR=$WORKDIR/RootFS

###
### Sanity checks
###

if ! grep -q "^lfs:" /etc/passwd || ! grep -q "^lfs:" /etc/group
then
    echo "Please create the 'lfs' user and group before proceeding."
    echo "Also, certify that 'lfs' has suid rights."
    exit 1
fi

if [ $UID = 0 ]
then
    echo "This script should not be run as root. Please invoke it with a regular"
    echo "user account with sudo privileges."
    exit 1
fi

sudo whoami >& /dev/null
if [ $? != 0 ]
then
    echo "Please make sure that your user has sudo privileges before continuing."
    exit 1
fi

###################################################################################################
### Operation -- LFS part of the script
###################################################################################################

[ ! -d "$BUILDDIR" ] && mkdir -p "$BUILDDIR"
[ ! -d "$PACKAGEDIR" ] && mkdir -p "$PACKAGEDIR"

if [ $(ls "$BUILDDIR"/ | wc -l | awk {'print $1'}) -gt 0 ]
then
    echo "Using existing build directory $BUILDDIR"
fi

if [ ! -d "$WORKDIR/jhalfs-trunk" ]
then
    echo "Downloading JHALFS from Subversion"
	svn co svn://svn.linuxfromscratch.org/ALFS/jhalfs/trunk "$WORKDIR/jhalfs-trunk"

    mkdir -p "$WORKDIR/jhalfs-trunk/custom"
    pushd "$WORKDIR/jhalfs-trunk" > /dev/null

    echo "Obtaining patches"
    for patchFile in ${PATCHES[@]}; do cp "$patchFile" custom/$(basename "$patchFile"); done

    echo "Patching"
    jhalfsPatch=$(ls custom/*gobolinux-jhalfs.patch)
    if [ ! -e ".gobolinux-patched" ]
    then
        patch -i "$jhalfsPatch" -p0
        touch .gobolinux-patched
    fi

    if [ ! -e BLFS/libs/gobolinux_patch_buildscript ]
    then
        cp -R "$GOBO_JHALFS_DIR"/* .
    fi

    popd > /dev/null
fi

if [ ! -d "$BUILDDIR/Programs/BootScripts-ALFS" ]
then
    pushd "$WORKDIR/jhalfs-trunk" > /dev/null
    echo "Running menuconfig."
    make menuconfig

    echo "Processing JHALFS configuration file"
    perl -pi -e "s,^BUILDDIR=.*,BUILDDIR=\"$BUILDDIR\",g" configuration
    [ -d "/Users" ] && perl -pi -e 's,LHOME=.*,LHOME=\"/Users\",g' configuration

    ./jhalfs run || exit 1
    popd > /dev/null
fi

if [ ! -e "$BUILDDIR/tools/bin/packInstall.sh" ]
then
    sudo cp "$WORKDIR/jhalfs-trunk/pkgmngt/packInstall.sh" "$BUILDDIR/tools/bin/packInstall-gobolinux.sh"
    sudo chmod +x "$BUILDDIR/tools/bin/packInstall-gobolinux.sh"
fi

###
### Move left-over files to the packages where they belong
###

function MoveSettingsFile() {
    local settingsFile="$1"
    local programName="$2"
    local programVersion=$(ls $BUILDDIR/Programs/$programName 2> /dev/null | grep -v Settings)
    if [ -z "$programVersion" ]
    then
        return
    fi
    if [ -e "$BUILDDIR/System/Index/etc/$settingsFile" -a ! -h "$BUILDDIR/System/Index/etc/$settingsFile" ]
    then
        sudo mkdir -p "$BUILDDIR/Programs/$programName/Settings"
        sudo mkdir -p "$BUILDDIR/Programs/$programName/$programVersion/Resources/Defaults/Settings"
        sudo cp -v "$BUILDDIR/System/Index/etc/$settingsFile" "$BUILDDIR/Programs/$programName/Settings"
        sudo mv -v "$BUILDDIR/System/Index/etc/$settingsFile" "$BUILDDIR/Programs/$programName/$programVersion/Resources/Defaults/Settings"
        sudo ln -v -s "/Programs/$programName/Settings/$settingsFile" "$BUILDDIR/System/Index/etc/$settingsFile"
    fi
}

function MoveFile() {
    local filename="$1"
    local programName="$2"
    local programVersion=$(ls $BUILDDIR/Programs/$programName 2> /dev/null | grep -v Settings)
    if [ -z "$programVersion" ]
    then
        return
    fi
    if [ -e "$BUILDDIR/System/Index/$filename" -a ! -h "$BUILDDIR/System/Index/$filename" ]
    then
        sudo mv -v "$BUILDDIR/System/Index/$filename" "$BUILDDIR/Programs/$programName/$programVersion/$filename"
        sudo ln -v -s "/Programs/$programName/$programVersion/$filename" "$BUILDDIR/System/Index/$filename"
    fi
}

MoveSettingsFile nsswitch.conf Glibc
MoveSettingsFile udev/hwdb.bin Udev
MoveSettingsFile inittab BootScripts-ALFS
MoveSettingsFile syslog.conf Sysklogd

MoveFile lib/libstdc++.la GCC
MoveFile lib/locale Glibc
MoveFile share/zoneinfo Glibc

###
### Update /etc/passwd, /etc/group and /etc/resolv.conf
###

if ! grep -q "^fibo:" "$BUILDDIR/System/Index/etc/passwd"
then
    echo "fibo:x:21:21::/tmp:/bin/bash" | sudo tee -a "$BUILDDIR/System/Index/etc/passwd" > /dev/null
    echo "fibo:x:21:" | sudo tee -a "$BUILDDIR/System/Index/etc/group" > /dev/null
fi
if ! grep -q "^`whoami`:" "$BUILDDIR/System/Index/etc/passwd"
then
    grep "^`whoami`:" /etc/passwd | sudo tee -a "$BUILDDIR/System/Index/etc/passwd" > /dev/null
fi
if grep -q "EDITME" "$BUILDDIR/System/Index/etc/resolv.conf"
then
    sudo rm -f "$BUILDDIR/System/Index/etc/resolv.conf"
    echo nameserver 208.67.222.222 | sudo tee -a "$BUILDDIR/System/Index/etc/resolv.conf" > /dev/null
    echo nameserver 208.67.220.220 | sudo tee -a "$BUILDDIR/System/Index/etc/resolv.conf" > /dev/null
fi

###
### Make sure we have /bin/sh
###

if [ ! -e "$BUILDDIR/bin/sh" ]
then
    bashVersion=$(ls $BUILDDIR/Programs/Bash | grep -v Settings)
    sudo ln -sf "bash" "$BUILDDIR/Programs/Bash/$bashVersion/bin/sh"
    sudo ln -sf "/Programs/Bash/$bashVersion/bin/sh" "$BUILDDIR/System/Index/bin/sh"
fi

###
### Fix /proc and /dev
###

if [ ! -h "$BUILDDIR/proc" ]
then
    if ! grep -q "$BUILDDIR/proc" /proc/mounts
    then
        sudo rm -rf "$BUILDDIR/proc"
        sudo ln -s System/Kernel/Status "$BUILDDIR/proc"
    fi
fi

if [ ! -h "$BUILDDIR/dev" ]
then
    if ! grep -q "$BUILDDIR/dev" /proc/mounts
    then
        sudo rm -rf "$BUILDDIR/dev"
        sudo ln -s System/Kernel/Devices "$BUILDDIR/dev"
    fi
fi

###################################################################################################
### Operation -- GoboLinux part of the script
###################################################################################################

function CreateGoboPackage() {
    local appName="$1"
    appVersion=$(ls "$appName/" | grep -v "Settings\|Current")
    packageName="$PACKAGEDIR/$appName--$appVersion-r0--$(uname -m).tar.bz2"
    if [ "$appName" = "Compile" -o "$appName" = "Scripts" ]
    then
        # BuildLiveCD will create packages for those
        echo "Skipping package $appName -- BuildLiveCD will take care of it"
        return
    fi
    if [ ! -e "$packageName" ]
    then
        echo "Creating package for $appName $appVersion"
        sudo find "$appName/$appVersion" -type d -empty | while read line
        do 
            sudo rmdir -p $line >& /dev/null
        done
        sudo tar cjf "$packageName" "$appName"

        echo "Creating 'Current' link"
        [ ! -e "$appName/Current" ] && sudo ln -s "$appVersion" "$appName/Current"
    fi
}

function InChroot() {
    (
        sudo mount -o bind /proc "$BUILDDIR/proc"
        sudo mount -o bind /dev "$BUILDDIR/dev"
        export PATH=/bin:/sbin
        export NO_UNIONFS=yes
        export SUDO_OK=1

        sudo rm -f "$BUILDDIR/etc/mtab"
        sudo touch "$BUILDDIR/etc/mtab"
        sudo chroot "$BUILDDIR" $@
        
        sync
        sleep 1
        sudo umount "$BUILDDIR/dev"
        sudo umount "$BUILDDIR/proc"
    )
}

function InstallGoboPackage() {
    local appName="$1"
    local snapshotDir="$(date +%Y%m%d)-SVN"
    local packageDir="$BUILDDIR/Programs/$appName/$snapshotDir"
    sudo mkdir -p "$packageDir"
    sudo cp -R "$WORKDIR/ISO/LocalSVN/tools/$appName/"* "$packageDir/"
    sudo ln -s "$snapshotDir" "$BUILDDIR/Programs/$appName/Current"
    sudo find "$packageDir" -name .svn -type d | xargs sudo rm -rf
    sudo cp -R "$packageDir/Resources/Defaults/Settings" "$packageDir/.."
    InChroot make -C "/Programs/$appName/$snapshotDir"
    InChroot /tools/bin/SymlinkProgram -c overwrite $appName
}

###
### Checkout GoboLinux scripts
###

if [ ! -d "$WORKDIR/BuildLiveCD" ]
then
    svn checkout http://svn.gobolinux.org/tools/branches/015/BuildLiveCD "$WORKDIR/BuildLiveCD"
fi

if [ ! -d "$WORKDIR/ISO/LocalSVN/tools" ]
then
    # Checkout copies of Scripts and Compile from SVN
    mkdir "$WORKDIR/ISO"
    pushd "$WORKDIR/ISO" > /dev/null
    ln -fs ../Packages .
    livecdDataDir="$WORKDIR/BuildLiveCD/Data" \
        "$WORKDIR/BuildLiveCD/bin/UpdateEnvironment"

    # Install Scripts and Compile in the chroot
    InstallGoboPackage Scripts
    InstallGoboPackage Compile

    # Rename Coreutils' install to real_install
    coreutilsVersion=$(ls "$BUILDDIR/Programs/CoreUtils/" | grep -v "Settings\|Current")
    coreutilsDir="$BUILDDIR/Programs/CoreUtils/$coreutilsVersion"
    if [ ! -e "$coreutilsDir/bin/real_install" ]
    then
        sudo mv "$coreutilsDir/bin/install" "$coreutilsDir/bin/real_install"
        InChroot SymlinkProgram CoreUtils "$coreutilsVersion"
    fi
    popd > /dev/null
fi

for appName in Linux Fuse CMake UnionFS-Fuse Help2Man
do
    if [ ! -d "$BUILDDIR/Programs/$appName" ]
    then
        InChroot Compile --no-sign "$appName"
    fi
done

###
### Create packages using plain tar. Please notice the revision number (r0), for there are
### no GoboLinux recipes to produce them yet.
### We also update the package list based on what's been compiled so far.
###

pushd "$BUILDDIR/Programs" > /dev/null
for appName in *; do CreateGoboPackage "$appName"; done
ls > "$WORKDIR/BuildLiveCD/Data/Packages-List-Base"
popd > /dev/null
    

if [ ! -d "$WORKDIR/ISO/Output" ]
then
    # Create the ISO
    pushd "$WORKDIR/ISO" > /dev/null
    (
        export livecdDataDir="$WORKDIR/BuildLiveCD/Data"
        export livecdUseSystemIndex="true"
        export PATH="$PATH:$WORKDIR/BuildLiveCD/bin"
        sudo "$WORKDIR/BuildLiveCD/bin/CompressAndBuildISO"
    )
    popd > /dev/null
fi

### TODO: make sure the following files are created by the live cd scripts:
### /etc/fstab 
### /etc/group
### /etc/gshadow
### /etc/hosts
### /etc/inittab
### /etc/inputrc
### /etc/localtime(symlink)
### /etc/lsb-release(?)
### /etc/passwd(root, bin, nobody)
### /etc/profile
###
### /Data/Variable/mount/utab (empty)
### /Data/Variable/log/btmp (empty)
### /Data/Variable/log/wtmp (empty)
### /Data/Variable/log/lastlog (empty)
### ./Data/Variable/cache/ldconfig/ (directory)
###

### To be able to boot your new system you need to follow
### the next steps:
### 
###         - Mount the virtual kernel file systems.
### 
###         - Enter to the chroot using the command found
###         in the section -Entering the Chroot Environment-
###         except if building CLFS with METHOD=boot.
### 
###         - Set a password for the root user.
### 
###         - Edit or create /etc/fstab,
###                          /etc/hosts,
###                          /etc/sysconfig/clock,
###                          /etc/sysconfig/console,
###                          /etc/sysconfig/network,
###                          /etc/sysconfig/ifconfig.eth0,
###                          /etc/resolv.conf
###         and any other configuration file required to suit your needs.
