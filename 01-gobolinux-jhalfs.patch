Index: install-blfs-tools.sh
===================================================================
--- install-blfs-tools.sh	(revision 3771)
+++ install-blfs-tools.sh	(working copy)
@@ -53,7 +53,7 @@
 
 COMMON_DIR="common"
 BLFS_TOOL='y'
-BUILDDIR=$(cd ~;pwd)
+BUILDDIR="$WORKDIR/RootFS"
 BLFS_ROOT="${BLFS_ROOT:=/blfs_root}"
 TRACKING_DIR="${TRACKING_DIR:=/var/lib/jhalfs/BLFS}"
 
@@ -109,6 +109,9 @@
 mkdir -p $TRACKING_DIR
 [[ $VERBOSITY > 0 ]] && echo "... OK"
 
+# Replace the default configuration file with the Gobo-ALFS one.
+cp configuration.blfs ${BUILDDIR}${BLFS_ROOT}/configuration
+
 [[ $VERBOSITY > 0 ]] && echo -n "Downloading and validating the book (may take some time)"
 make -j1 -C $BUILDDIR$BLFS_ROOT TRACKING_DIR=$TRACKING_DIR \
     $BUILDDIR$BLFS_ROOT/packages.xml
Index: jhalfs
===================================================================
--- jhalfs	(revision 3771)
+++ jhalfs	(working copy)
@@ -416,6 +416,16 @@
 
 # Download or updates the book source
   get_book
+  BOOK_PATCH_FILE=$CWD/custom/02-gobolinux-book.patch
+  DEVTREE=$JHALFSDIR/lfs-development
+  if [ -d "$DEVTREE" -a ! -e "$DEVTREE/.patched-gobolinux" ]
+  then
+      pushd "$DEVTREE" >& /dev/null
+      echo "Applying patch $BOOK_PATCH_FILE to $PWD"
+      patch -i "$BOOK_PATCH_FILE" -p0
+      touch .patched-gobolinux
+      popd >& /dev/null
+  fi
   extract_commands
   echo "${SD_BORDER}${nl_}"
 
Index: common/libs/func_wrt_Makefile
===================================================================
--- common/libs/func_wrt_Makefile	(revision 3771)
+++ common/libs/func_wrt_Makefile	(working copy)
@@ -110,6 +110,8 @@
          ;;
      libdbus) echo $(grep "^dbus" $JHALFSDIR/pkg_tarball_list | head -n1 )
          ;;
+     gobolinux) echo $(grep "^gobolinux_alfs" $JHALFSDIR/pkg_tarball_list | head -n1 )
+         ;;
      *)  echo $(grep "^$script_name[_-][[:digit:]]" $JHALFSDIR/pkg_tarball_list | head -n1 )
          ;;
    esac
Index: BLFS/gen_pkg_book.sh
===================================================================
--- BLFS/gen_pkg_book.sh	(revision 3771)
+++ BLFS/gen_pkg_book.sh	(working copy)
@@ -121,6 +121,11 @@
 source ${LibDir}/func_dependencies
 [[ $? > 0 ]] && echo -e "\n\tERROR: func_dependencies did not load..\n" && exit
 
+#---------------------
+# GoboLinux fixes
+source ${LibDir}/gobolinux_patch_buildscript
+[[ $? > 0 ]] && echo -e "\n\tERROR: gobolinux_patch_buildscript did not load..\n" && exit
+
 #------- MAIN --------
 if [[ ! -f ${PackFile} ]] ; then
   echo -e "\tNo packages file has been found.\n"
@@ -183,4 +188,7 @@
 chmod -R +x scripts
 echo -e "done\n"
 
+# Patch the scripts
+for i in ./scripts/*; do PatchBLFSScript "$i"; done
+
 #clean_configuration
Index: BLFS/xsl/scripts.xsl
===================================================================
--- BLFS/xsl/scripts.xsl	(revision 3771)
+++ BLFS/xsl/scripts.xsl	(working copy)
@@ -265,7 +265,7 @@
           </xsl:choose>
           <xsl:if test="not(contains(string(parent::listitem/following-sibling::listitem[1]/para),'FTP'))">
             <xsl:text>
-    cp $PACKAGE $SRC_ARCHIVE
+    if [ ! -z "$SRC_ARCHIVE" ]; then cp $PACKAGE $SRC_ARCHIVE; fi
   fi
 fi
 </xsl:text>
@@ -279,7 +279,7 @@
           <xsl:value-of select="ulink/@url"/>
         </xsl:if>
         <xsl:text>
-    cp $PACKAGE $SRC_ARCHIVE
+    if [ ! -z "$SRC_ARCHIVE" ]; then cp $PACKAGE $SRC_ARCHIVE; fi
   fi
 fi
 </xsl:text>
@@ -323,7 +323,7 @@
         <xsl:value-of select="ulink/@url"/>
         <xsl:text>&#xA;</xsl:text>
         <xsl:text>
-    cp $PATCH $SRC_ARCHIVE
+    if [ ! -z "$SRC_ARCHIVE" ]; then cp $PATCH $SRC_ARCHIVE; fi
   fi
 fi
 </xsl:text>
@@ -355,7 +355,7 @@
           <xsl:text> || \&#xA;    wget -T 30 -t 5 </xsl:text>
           <xsl:value-of select="ulink/@url"/>
           <xsl:text>
-    cp $PACKAGE1 $SRC_ARCHIVE
+    if [ ! -z "$SRC_ARCHIVE" ]; then cp $PACKAGE1 $SRC_ARCHIVE; fi
   fi
 fi
 </xsl:text>
@@ -440,7 +440,7 @@
     cp $SRC_ARCHIVE/$BOOTPACKG $BOOTPACKG
   else
     wget -T 30 -t 5 $URL
-    cp $BOOTPACKG $SRC_ARCHIVE
+    if [ ! -z "$SRC_ARCHIVE" ]; then cp $BOOTPACKG $SRC_ARCHIVE; fi
   fi
   rm -f unpacked
 fi
